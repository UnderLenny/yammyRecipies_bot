import { Context } from "telegraf";
import { fetchRecipes } from "../services/apiService.js";
import { AxiosResponse } from "axios";
import { getRecipeMsgParams, translateText } from "../utils/helpers.js";

export async function recipes(ctx: Context): Promise<void> {
  let title;
  let image;
  try {
    const ingredient = getRecipeMsgParams(ctx);
    if (!ingredient) {
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.");
      return;
    }
    const recipes: AxiosResponse<any> | undefined = await fetchRecipes(
      ingredient
    );
    if (recipes) {
      const recipeTitle = recipes.data.results[0].title;
      console.log(recipeTitle);
      title = await translateText(recipeTitle, "en", "ru");
      image = recipes.data.results[0].image;
      ctx.replyWithPhoto(image, {
        caption: `–Ø –¥—É–º–∞—é —Ç–µ–±–µ –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:\n*${title}*üçΩ`,
        parse_mode: "Markdown",
      });

      // console.log(JSON.stringify(recipes.data));
    } else {
      ctx.reply("–ü–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüòï");
    }
  } catch (err) {
    console.error(err);
    ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µüé≤");
  }
}
