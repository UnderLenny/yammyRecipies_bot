import { Context, Markup, Telegraf } from "telegraf";
import { fetchRecipes } from "../services/apiService.js";
import {
  handleIngredient,
  handleRecipe,
} from "./handlers/getIngredientsHandler.js";
import { handleReroll } from "./handlers/rerollHandler.js";

export async function recipe(bot: Telegraf): Promise<void> {
  try {
    bot.hears("üç£–ü–æ–¥–æ–±—Ä–∞—Ç—å –±–ª—é–¥–æ", async (ctx) => {
      const message = ctx.message.text;
      if (message.includes("üç£–ü–æ–¥–æ–±—Ä–∞—Ç—å –±–ª—é–¥–æ")) {
        await ctx.reply("–ö–∞–∫–∏–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã —Ç—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—åüí´", {
          reply_markup: {
            force_reply: true,
            input_field_placeholder: "Reply with your answer",
          },
        });
      }
      console.log(ctx.message.text);
    });

    bot.on("text", async (ctx) => {
      const products = ctx.message.text;
      console.log("User response:", products);
      const dishName = `–Ø —Ö–æ—á—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–ª—é–¥–æ —Å —ç—Ç–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏: ${products}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ(–æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –ù–ï –ù–£–ñ–ù–û). –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—à–∏—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ–≥–æ –ø–æ–¥–≤–∏–¥–æ–≤. –ï—Å–ª–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª –∫–∞–∫–æ–µ-—Ç–æ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ –ø–æ —Ç–µ–º–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫–æ–π-—Ç–æ —Å—ä–µ–¥–æ–±–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –º—è—Å–æ –∏ –≤—Å–µ —á—Ç–æ-—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –µ—Å—Ç—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∏—Ä–µ, —Ç–æ –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –Ω–æ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ(–Ø –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å, –Ω–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å ( –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–æ–µ 1 –±–ª—é–¥–æ)). –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –æ–±—à–∏—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç(–∫ –ø—Ä–∏–º–µ—Ä—É –º—è—Å–æ(–≥–æ–≤—è–¥–∏–Ω–∞ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ), —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∏–∑ –Ω–µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å. –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é(–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ), —Ç–æ —É—á–∏—Ç—ã–≤–∞–π –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã`;
      const dishNameResponse: any = await fetchRecipes(dishName);
      console.log(dishNameResponse);

      if (
        dishNameResponse ===
          "–ö–∞–∫ —É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —É –º–µ–Ω—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –Ω–æ –ø–æ—á–µ–º—É-—Ç–æ —è —Å–æ–≤—Å–µ–º –Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —ç—Ç—É —Ç–µ–º—É." ||
        dishNameResponse ===
          "–ù–µ –ª—é–±–ª—é –º–µ–Ω—è—Ç—å —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –Ω–æ –≤–æ—Ç —Å–µ–π—á–∞—Å —Ç–æ—Ç —Å–∞–º—ã–π —Å–ª—É—á–∞–π." ||
        dishNameResponse ===
          "–ß—Ç–æ-—Ç–æ –≤ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ –º–µ–Ω—è —Å–º—É—â–∞–µ—Ç. –ú–æ–∂–µ—Ç, –ø–æ–≥–æ–≤–æ—Ä–∏–º –Ω–∞ –¥—Ä—É–≥—É—é —Ç–µ–º—É?"
      ) {
        ctx.reply("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è —Ç–∞–∫–æ–µ –Ω–µ–ª—å–∑—è –µ—Å—Ç—å");
      } else {
        const stickerMessage = await ctx.replyWithSticker(
          "CAACAgIAAxkBAAEHB5hmmnNwCvp_ToISqpwa0Ozgdplr9AACeAIAAladvQr8ugi1kX0cDDUE"
        );
        const messageID = stickerMessage.message_id;

        setTimeout(async () => {
          await ctx.reply(
            `–Ø –¥—É–º–∞—é —Ç–µ–±–µ –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:\n${dishNameResponse}`,
            Markup.inlineKeyboard([
              Markup.button.callback("–î–∞–≤–∞–π –¥—Ä—É–≥–æ–µ", "reroll"),
              Markup.button.callback("–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã", "get_ingredients"),
            ])
          );
          await ctx.deleteMessage(messageID);
        }, 5000);
      }
      let getIngredients: string;
      bot.action("get_ingredients", async (ctx) => {
        getIngredients = await handleIngredient(dishNameResponse);
        ctx.reply(
          `–õ–æ–≤–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ãüèπ\n\n${getIngredients}`,
          Markup.inlineKeyboard([Markup.button.callback("–†–µ—Ü–µ–ø—Ç", "recipe")])
        );
      });

      bot.action("reroll", async (ctx) => {
        if (
          ctx.callbackQuery &&
          ctx.callbackQuery.message &&
          "text" in ctx.callbackQuery.message
        ) {
          let reroll;
          const currentMessage = ctx.callbackQuery.message.text;
          let newMessage;

          do {
            reroll = await handleReroll(products, dishNameResponse);
            newMessage = `–ß—Ç–æ –Ω–∞—Å—á–µ—Ç —ç—Ç–æ–≥–æ?\n\n${reroll}`;
          } while (currentMessage === newMessage);

          await ctx.editMessageText(
            newMessage,
            Markup.inlineKeyboard([
              Markup.button.callback("–î–∞–≤–∞–π –¥—Ä—É–≥–æ–µ", "reroll"),
              Markup.button.callback("–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã", "get_ingredients"),
            ])
          );
        } else {
          await ctx.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
          );
        }
      });

      bot.action("recipe", async (ctx) => {
        const getRecipe = await handleRecipe(dishNameResponse, getIngredients);
        ctx.reply(`–Ø –¥—É–º–∞—é —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µüß∂\n\n${getRecipe}`);
      });
    });
  } catch (err) {
    console.error(err);
  }
}
